//Method 1 : Memoization
class Solution {
    static int helper(int idx , int W, int[] val , int[]wt ,int[][] dp){
        if(idx == wt.length) return 0;
        if(dp[idx][W]!=-1) return dp[idx][W];
        
        int skip = helper(idx+1,W,val,wt,dp);
        
        if(wt[idx]>W) return dp[idx][W] = skip;
        
        int take = val[idx] + helper(idx+1 ,W-wt[idx], val,wt ,dp);
        
        return dp[idx][W] = Math.max(skip ,take);
    }
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int[][] dp = new int[wt.length][W+1];
        for(int i = 0 ;i< dp.length ;i++){
            for(int j = 0;j<dp[0].length ;j++){
                dp[i][j] = -1;
            }
        }
        return helper(0,W,val,wt,dp);
    }
}


//Method 2 : Tabulation
class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n = val.length;
        
        int[][] dp = new int[n][W+1];
        
        for(int i = 0; i< dp.length ;i++){
            for(int c = 0;c < dp[0].length ;c++){
                int skip = (i>0) ? dp[i-1][c] : 0;
                if(wt[i] > c) dp[i][c] = skip;
                else{
                    int pick = val[i];
                    pick += (i>0) ? dp[i-1][c-wt[i]] : 0;
                    dp[i][c] = Math.max(skip , pick);
                }
            }
        }
        return dp[n-1][W];
    }
}

