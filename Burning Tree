

// User function Template for Java

class Solution {
    /*class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }*/
    
    public static Node findtarget(Node root, int target) {
        if (root == null) return null;
        if (root.data == target) return root;
        
        Node left = findtarget(root.left, target);
        if (left != null) return left; // Found in left subtree
        
        return findtarget(root.right, target); // Search in right subtree
    }

    public static void mark_parents(Node root, Map<Node, Node> parent_track) {
        if (root == null) return;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            Node temp = q.poll();
            if (temp.left != null) {
                parent_track.put(temp.left, temp);
                q.add(temp.left);
            }
            if (temp.right != null) {
                parent_track.put(temp.right, temp);
                q.add(temp.right);
            }
        }
    }

    public static int minTime(Node root, int target) {
        if (root == null) return 0;

        Node start = findtarget(root, target);
        if (start == null) return 0; // Target node not found

        Map<Node, Node> parent_track = new HashMap<>();
        mark_parents(root, parent_track);

        Map<Node, Boolean> visited = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        
        q.add(start);
        visited.put(start, true);
        int time = -1;  

        while (!q.isEmpty()) {
            int size = q.size();
            time++;

            for (int i = 0; i < size; i++) {
                Node curr = q.poll();

                // Visit left child
                if (curr.left != null && !visited.containsKey(curr.left)) {
                    q.add(curr.left);
                    visited.put(curr.left, true);
                    
                }
                // Visit right child
                if (curr.right != null && !visited.containsKey(curr.right)) {
                    q.add(curr.right);
                    visited.put(curr.right, true);
                    
                }
                // Visit parent
                if (parent_track.containsKey(curr) && !visited.containsKey(parent_track.get(curr))) {
                    q.add(parent_track.get(curr));
                    visited.put(parent_track.get(curr), true);
                }
            }

        }
        return time;
    }
}
