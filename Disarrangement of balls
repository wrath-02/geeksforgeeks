//Method 1 : Memoization

class Solution {
    static int helper(int n ,int[]dp){
        if(n==0) return 1;
        if(n==1) return 0;
        if(dp[n]!=-1) return dp[n];
        return dp[n] = (n-1)*(helper(n-1,dp) + helper(n-2,dp));
    }
    static int countDer(int n) {
        // Base case
        int[] dp = new int[n+1];
        Arrays.fill(dp , -1);
        return helper(n,dp);
    }
}

//Method 2: Tabulation

class Solution {
    static int countDer(int n) {
        // Base case
        int[] dp = new int[n+1];
        dp[0] = 1;
        if(n>0) dp[1] = 0;
        for(int i = 2;i<=n;i++){
            dp[i] = (i-1) * ((dp[i-1] + dp[i-2]));
        }
        return dp[n];
    }
}
